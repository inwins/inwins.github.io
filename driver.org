#+AUTHOR:
* 第一个windows驱动
程序代码
头文件
#+BEGIN_SRC 

  /////////////////////////////////////////////////////////////////////////////
//  文件名 : fitst.h
//  工程 : first 
//  作者 : enjoy5512   修改者 : enjoy5512   最后优化注释者 : enjoy5512
//  个人技术博客 : blog.csdn.net/enjoy5512
//  个人GitHub   : github.com/whu-enjoy
//  描述 : 第一个驱动程序的头文件
//  版本 : 最终确定版  完成日期 : 2016年7月5日 09:25:30
//  修改 :
//  参考文献 :
//       <<Windows内核安全与驱动开发>> 谭文 陈铭霖 编著
//////////////////////////////////////////////////////////////////////////////

#ifndef __FIRST_H__
#define __FIRST_H__


//////////////////////////////////////////////////////////////////////////////
//*= = 头文件声明
//////////////////////////////////////////////////////////////////////////////
#include <ntddk.h>

//////////////////////////////////////////////////////////////////////////////
//*= = 宏与结构体
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//*= = 函数声明
//////////////////////////////////////////////////////////////////////////////
NTSTATUS
DriverEntry(
    __in PDRIVER_OBJECT DriverObject,
    __in PUNICODE_STRING RegistryPath
    );

VOID
DriverUnload(
    __in PDRIVER_OBJECT DriverObject
    );

#endif //End of __FIRST_H__
  #+END_SRC
源文件
#+BEGIN_SRC 
/////////////////////////////////////////////////////////////////////////////
//  文件名 : fitst.c
//  工程 : first 
//  作者 : enjoy5512   修改者 : enjoy5512   最后优化注释者 : enjoy5512
//  个人技术博客 : blog.csdn.net/enjoy5512
//  个人GitHub   : github.com/whu-enjoy
//  描述 : 第一个驱动程序
//  主要函数 :
//      VOID DriverUnload(PDRIVER_OBJECT driver) 卸载函数
//      NTSTATUS DriverEntry(PDRIVER_OBJECT driver, PUNICODE_STRING reg_path) 入口函数
//  版本 : 最终确定版  完成日期 : 2016年7月5日 09:36:17
//  修改 :
//  参考文献 :
//       <<Windows内核安全与驱动开发>> 谭文 陈铭霖 编著
/////////////////////////////////////////////////////////////////////////////

#include "first.h"

//程序说明开始
//==================================================================================
//  功能 : 驱动程序入口函数
//  参数 :    __in PDRIVER_OBJECT DriverObject, in PUNICODE_STRING RegistryPath
//  (入口)  __in PDRIVER_OBJECT DriverObject  : 驱动对象
//          __in PUNICODE_STRING RegistryPath : 驱动在注册表中的键值
//  (出口)  无
//  返回 :  NTSTATUS
//  主要思路 : 先设置一个int3断点,然后输出一句话,设置卸载函数
//  调用举例 : 
//  日期 : 2016年7月5日 09:32:32
//==================================================================================
//程序说明结束
NTSTATUS 
DriverEntry(
    __in PDRIVER_OBJECT DriverObject, 
    __in PUNICODE_STRING RegistryPath
    )
{
    #if DBG
        _asm int 3
    #endif

    DbgPrint("first : hello ,load server!!\n");

    DriverObject->DriverUnload = DriverUnload;

    return STATUS_SUCCESS;
}

//程序说明开始
//==================================================================================
//  功能 : 驱动程序卸载
//  参数 :    __in PDRIVER_OBJECT DriverObject
//  (入口)  __in PDRIVER_OBJECT DriverObject  : 驱动对象
//  (出口)  无
//  返回 :  VOID
//  主要思路 : 输出一句话
//  调用举例 : 
//  日期 : 2016年7月5日 09:35:59
//==================================================================================
//程序说明结束
VOID 
DriverUnload(
    __in PDRIVER_OBJECT driver
    )
{
    DbgPrint("firts:Our driver is unloading!!\r\n");
}

#+END_SRC
makefile文件
#+BEGIN_SRC 
!IF 0

Copyright (C) Microsoft Corporation, 1999 - 2002

Module Name:

    makefile.

Notes:

    DO NOT EDIT THIS FILE!!!  Edit .\sources. if you want to add a new source
    file to this component.  This file merely indirects to the real make file
    that is shared by all the components of Windows NT (DDK)

!ENDIF

!INCLUDE $(NTMAKEENV)\makefile.def


#+END_SRC
sources文件
#+BEGIN_SRC 
TARGETNAME=first
TARGETTYPE=DRIVER
SOURCES=first.c
#+END_SRC
环境变量脚本
#+BEGIN_SRC 
set path=%path%;C:\WinDDK\7600.16385.1\bin
set WNETBASE=C:\WinDDK\7600.16385.1
setenv %WNETBASE% fre x64
#+END_SRC
 [[http://www.microsoft.com/en-us/download/details.aspx?displaylang%3Den&id%3D11800][ddk下载地址]]
安装好下载的ddk，先运行一下设置环境变量的脚本，在然后在代码目录中执行build命令即可
* 驱动的安装
 usb设备的vid&pid表[[http://www.linux-usb.org/usb.ids][Linux-usb-id表]]。
 驱动的是根据inf文件的描述执行安装的，其中我们一般调用devcon.exe或dpinst.exe进行安装。
 可以采用如下的命令，注意devcon程序是32还是64位的，
 首先需要生成cat文件，使用inf2cat文件，就能够生成cat文件，驱动就可以安装了
 执行完后可以检查日志文件，
C:\Windows\inf\setupapi.dev.log，是否在哪里出现安装错误
#+BEGIN_SRC 
Inf2Cat /driver:PackagePath /os:WindowsVersionList [/nocat] [/verbose] [/?] [other switches]
devcon -r rescan emul.inf "USB\VID_20B1&PID_0002&MI_00"
devcon -r update emul.inf "USB\VID_20B1&PID_0002&MI_00"

#+END_SRC
